<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>@xjump</title>
        <link>https://xjump.me</link>
        <description>notes by xjump</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://xjump.me/categories/bian-cheng-yu-yan/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 15 Aug 2018 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Rust错误处理（转）</title>
                <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
                <link>https://xjump.me/rust-error-handling/</link>
                <guid>https://xjump.me/rust-error-handling/</guid>
                <description>&lt;p&gt;&lt;em&gt;转自：https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;25506762，修改排版等内容&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;人孰无过，过而能改，善莫大焉。程序运行过程中总是会出现各种各样的问题，导致程序出现异常或错误，这些异常和错误本身不是 bug，但是如果不处理好的话就会成为 bug。不同编程语言提供了不同的机制来处理错误和异常，一般分为两大类：把错误当作值来处理；抛出异常。&lt;&#x2F;p&gt;
&lt;p&gt;Rust 提供以下基础设施做错误处理：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Option, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Result,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;unwrap, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;expect,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;combinators,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;try! &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;From &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Carrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;Try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust 并没有提供基于 exception 的错误处理机制，虽然 panic! 宏在让进程挂掉时也抛出堆栈，同时也可以用 std::panic::catch_unwind 捕捉 panic，但是极其不推荐用来处理常规错误。&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>VC++中反汇编0xCC,_RTC_CheckEsp与_RTC_CheckStackVars</title>
                <pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate>
                <link>https://xjump.me/vc-pp-disasm-cc-rce-rcsv/</link>
                <guid>https://xjump.me/vc-pp-disasm-cc-rce-rcsv/</guid>
                <description>&lt;h3&gt;0xCC&lt;&#x2F;h3&gt;
&lt;p&gt;在VC++编写的程序编程成Debug版，反汇编代码，函数入口处经常看到如下一段代码：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14E0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ebp  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14E1 8B EC                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ebp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;esp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14E3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;81 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;EC C0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;00 00 00        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;sub         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;esp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0C0h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14E9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ebx  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14EA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;56                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;esi  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14EB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;57                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edi  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14EC 8D BD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;FF FF FF        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lea         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ebp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0C0h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14F2 B9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30 00 00 00           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ecx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14F7 B8 CC CC CC CC           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0CCCCCCCCh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;00EA14FC F3 AB                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;rep stos    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dword ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;es&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>Lua 5.0的实现（中英文对照）</title>
                <pubDate>Wed, 19 Sep 2012 00:00:00 +0000</pubDate>
                <link>https://xjump.me/lua-implementation/</link>
                <guid>https://xjump.me/lua-implementation/</guid>
                <description>&lt;p&gt;&lt;strong&gt;Author&lt;&#x2F;strong&gt;&lt;br&#x2F;&gt;
Roberto Ierusalimschy (Department of Computer Science, PUC-Rio, Rio de Janeiro, Brazil roberto@inf.puc-rio.br)&lt;br&#x2F;&gt;
Luiz Henrique de Figueiredo(IMPA-Instituto de Matematica Pura e Aplicada, Rio de Janeiro, Brazil lhf@impa.br)&lt;br&#x2F;&gt;
Waldemar Celes(Department of Computer Science, PUC-Rio, Rio de Janeiro, Brazil celes@inf.puc-rio.br)&lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;翻译： xjump.me#at#gmail.com, @xjump&lt;br&#x2F;&gt;
原文： &lt;a href=&quot;http:&#x2F;&#x2F;www.lua.org&#x2F;doc&#x2F;jucs05.pdf&quot;&gt;http:&#x2F;&#x2F;www.lua.org&#x2F;doc&#x2F;jucs05.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Abstract &lt;&#x2F;strong&gt;
We discuss the main novelties of the implementation of Lua 5.0: its register-based virtaul machine, the new algorithm for optimizing tables used as arrays, the implementation of closures, and the addition of coroutines.&lt;br&#x2F;&gt;
&lt;strong&gt;Key Words &lt;&#x2F;strong&gt;
compilers, virtual machines, hash tables, closures, coroutines&lt;br&#x2F;&gt;
&lt;strong&gt;Category &lt;&#x2F;strong&gt;
D.3.4, D.3.3, D.3.2, E.2&lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;摘要 &lt;&#x2F;strong&gt;
我们讨论了Lua 5.0实现上的主要优点：基于寄存器的虚拟机，tables用于数组时新的优化算法，闭包的实现，以及协程。&lt;br&#x2F;&gt;
&lt;strong&gt;关键字 &lt;&#x2F;strong&gt;
编译器，虚拟机，Hash表，闭包，协程&lt;br&#x2F;&gt;
&lt;strong&gt;类别 &lt;&#x2F;strong&gt;
D.3.4，D.3.3，D.3.2，E.2&lt;br&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3&gt;
1 Introduct&lt;br&#x2F;&gt;
1 介绍  
&lt;&#x2F;h3&gt;
Lua was born in an academic laboratory as a tool for in-house software development but somehow was adopted by several industrial projects around the world and is now widely used in the game industry. [1]&lt;br&#x2F;&gt;
Lua诞生于一个学术实验室，当时是作为一个内部软件开发工具的，但逐渐被移植到了全世界的各个行业的工程中，而且现在广泛的用于游戏行业。[1]&lt;br&#x2F;&gt;
</description>
            </item>
        
    </channel>
</rss>
